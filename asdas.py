import os
import shutil
import subprocess
import re

# –ü—É—Ç–∏
ISO_DIR = "iso"
OUTPUT_DIR = "custom_iso"
DIST_NAME = "1.7_x86-64"
PACKAGES_LIST = "packages.txt"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log(message):
    print(f"[INFO] {message}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–∞–∫–µ—Ç–∞
def get_all_dependencies(package, visited=None):
    if visited is None:
        visited = set()

    if package in visited:
        return set()

    visited.add(package)
    dependencies = set()

    try:
        log(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø–∞–∫–µ—Ç–∞: {package}")
        result = subprocess.run(
            ["apt-cache", "depends", package],
            capture_output=True, text=True, check=True
        )
        for line in result.stdout.splitlines():
            if line.strip().startswith(("Depends:", "PreDepends:")):
                dep = line.split(":", 1)[1].strip()
                # –£–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                dep = re.split(r" \([^)]+\)", dep)[0].strip()
                dependencies.add(dep)
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                dependencies.update(get_all_dependencies(dep, visited))
        if dependencies:
            log(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è {package}: {', '.join(dependencies)}")
    except subprocess.CalledProcessError:
        log(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è {package}")
    return dependencies

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏
def find_package_files(package):
    package_files = []
    for root, _, files in os.walk(os.path.join(ISO_DIR, "pool")):
        for file in files:
            if re.match(f"{package}_[^_]+\.deb", file):
                package_files.append((root, file))
    return package_files

# –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
all_packages = set()
if os.path.exists(PACKAGES_LIST):
    log(f"–ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ {PACKAGES_LIST}")
    with open(PACKAGES_LIST, "r") as f:
        for line in f:
            pkg = line.strip()
            if pkg:
                all_packages.add(pkg)
                all_packages.update(get_all_dependencies(pkg))

# –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É
log("–ö–æ–ø–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã...")
for package in all_packages:
    package_files = find_package_files(package)
    if package_files:
        for root, file in package_files:
            src_path = os.path.join(root, file)
            relative_path = os.path.relpath(root, ISO_DIR)
            dest_dir = os.path.join(OUTPUT_DIR, relative_path)

            os.makedirs(dest_dir, exist_ok=True)
            shutil.copy2(src_path, dest_dir)
            log(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {file} -> {dest_dir}")
    else:
        log(f"[WARNING] –ü–∞–∫–µ—Ç {package} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ISO!")

# –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
dist_path = os.path.join(OUTPUT_DIR, "dists", DIST_NAME, "main/binary-amd64")
os.makedirs(dist_path, exist_ok=True)

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –ø–∞–∫–µ—Ç–æ–≤
log("–°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–∞–∫–µ—Ç–æ–≤ (Packages.gz)...")
subprocess.run(
    f"dpkg-scanpackages {OUTPUT_DIR}/pool/ | gzip -9 > {dist_path}/Packages.gz",
    shell=True
)

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º `Release`-—Ñ–∞–π–ª
release_content = f"""\
Origin: CustomRepo
Label: CustomRepo
Suite: stable
Codename: {DIST_NAME}
Architectures: amd64
Components: main
Description: Custom Debian Repository
MD5Sum:
"""

release_path = os.path.join(OUTPUT_DIR, "dists", DIST_NAME, "Release")
with open(release_path, "w") as f:
    f.write(release_content)

# üîê –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º `Release` GPG-–∫–ª—é—á–æ–º
GPG_KEY_ID = "your-key-id"  # üî¥ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π GPG-–∫–ª—é—á!
if GPG_KEY_ID:
    log("–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º `Release.gpg` –∏ `InRelease`...")
    subprocess.run(
        f"gpg --default-key {GPG_KEY_ID} --output {release_path}.gpg --detach-sign {release_path}",
        shell=True
    )
    subprocess.run(
        f"gpg --default-key {GPG_KEY_ID} --clearsign --output {release_path.replace('Release', 'InRelease')} {release_path}",
        shell=True
    )
else:
    log("[WARNING] GPG-–∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω! –ü–æ–¥–ø–∏—Å—å –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞.")

log("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥–æ—Ç–æ–≤! –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å `apt update`")